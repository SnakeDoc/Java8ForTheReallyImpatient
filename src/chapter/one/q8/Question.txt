Q: What happens when a lambda expression captures values in an enhanced `for`
	loop such as this one?
	
		```
		String[] names = { "Peter", "Paul", "Mary" };
		List<Runnable> runners = new ArrayList<>();
		for (String name : names)
			runners.add(() -> System.out.println(name));
		```
	Is it legal? Does each lambda expression capture a different value, or do
	they all get the last value? What happens if you use a traditional loop
	`for (int i = 0; i < names.length; i++)`?
	
A: The enhanced `for` loop value is allowed since the variable `name` is
	effectively `final` for the scope of the lambda expression, and therefore
	is legal. In this case, it prints the names in the array `names`.
	
	If we attempted to use a traditional `for` loop, we would get a compilation
	error since the value of `i` is modified after the lambda is created, and
	therefore is not effectively `final`. To bypass this, we could use a single
	element integer array to store the counter used in `i`, but this is
	technically undefined behavior and should be avoided.